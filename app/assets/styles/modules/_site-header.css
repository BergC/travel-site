.site-header {
    padding: 10px 0;
    position: absolute;
    z-index: 2;
    width: 100%;
    transition: background-color 0.3s ease-out; /*You can select what property you want transition to apply to, in this case it's background-color.*/

    &--is-expanded {
        background-color: rgba($mainBlue, 0.55);
    }

    @mixin atMedium {
        background-color: rgba($mainBlue, 0.3);
        position: fixed; /*This locks the header to the top of the screen while we scroll only for larger screens.*/

        &--dark {
            background-color: rgba(23, 51, 72, 0.85);
        }

    }

    &__btn-container {
        @mixin atMedium {
            float: right;
        }
        
    }

    &__logo {
        position: absolute;
        background-color: $mainBlue;
        padding: 25px 36px;
        top: 0;
        left: 50%;
        transform: translateX(-50%) scale(0.8);
        transform-origin: 50% 0%;
        transition: transform 0.3s ease-out;

        @mixin atMedium {
            left: auto;
            transform: translateX(0);

            /*By using the & symbol AFTER our .site-header--dark class, we're saying that only when the --dark modifier class is active, select the __logo and apply this CSS.*/
            .site-header--dark & {
                transform: scale(.56);
            }
        }

    }

    &__logo__graphic {
        text-indent: -9999px;
    }

    &__menu-icon {
        width: 20px;
        height: 19px;
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;

        &::before {
            content: ""; /*To make sure this pseudo-element appears give it a content of empty quotes.*/
            position: absolute;
            top: 0;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            transform-origin: 0 0; /*By default a div's origina is 50% 50%, meaning the center of the object (50% from the top and 50% from the left).  We want this bar to form an X when clicked, so it needs to rotate from the top left of the object.  To do that, we set the origin to the top left with 0 0.*/
            transition: transform 0.3s ease-out;
        }

        &__middle {
            position: absolute;
            top: 8px;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            transition: all 0.3s ease-out;
            transform-origin: 0 50%;
        }

        &::after {
            content: ""; /*To make sure this pseudo-element appears give it a content of empty quotes.*/
            position: absolute;
            bottom: 0;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            transform-origin: 0 100%;
            transition: transform 0.3s ease-out;
        }

        @mixin atMedium {
            display: none;
        }

    }

    &__menu-icon--close-x {
        &::before {
            transform: rotate(45deg) scaleX(1.25); /*scaleX increases the width of something, 1.25 implies 125% its original width.*/
        }

        .site-header__menu-icon__middle {
            opacity: 0; /*This eliminates the middle bar once the menu is clicked.*/
            transform: scaleX(0);
        }

        &::after {
            transform: rotate(-45deg) scaleX(1.25) translateY(1px);
        }
    }

    &__menu-content {
        opacity: 0;
        transform: scale(1.2); /*This creates a nice zoom-in effect when the menu icon is clicked on mobile.  We bring the menu links back to their normal size in the &--is-visible section below and lock them at their normal size at all times in the atMedium mixin.*/
        transition: all 0.3s ease-out; /*Because we're changing multiple properties, both opacity and z-index, we use the keyword "all" instead of "opacity" to specify what's transitioning.*/
        z-index: -10; /*This ensures that while the content is invisible with opacity 0, it can't be clicked on because it's layered deep beneath the other content.*/
        position: relative; /*Must position this relative now that we're using a z-index, otherwise the browser won't acknowledge our z-index value.*/
        padding-top: 90px;
        text-align: center;

        @mixin atMedium {
            opacity: 1;
            z-index: 1;
            padding-top: 0;
            transform: scale(1);
        }

        /*This is used to make the mobile-friendly nav-menu visible and invisible upon click, by adding a new class on event.*/
        &--is-visible {
            opacity: 1;
            z-index: 1;
            transform: scale(1);
        }

    }

}